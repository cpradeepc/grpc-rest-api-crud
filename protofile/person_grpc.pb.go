// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protofile/person.proto

package protofile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Person_CreateData_FullMethodName        = "/Person/CreateData"
	Person_GetDataById_FullMethodName       = "/Person/GetDataById"
	Person_GetAllDataByField_FullMethodName = "/Person/GetAllDataByField"
	Person_DeleteData_FullMethodName        = "/Person/DeleteData"
)

// PersonClient is the client API for Person service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// all request and respnse type 'JsonStruct' to use.
type PersonClient interface {
	CreateData(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error)
	GetDataById(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error)
	GetAllDataByField(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error)
	DeleteData(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error)
}

type personClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonClient(cc grpc.ClientConnInterface) PersonClient {
	return &personClient{cc}
}

func (c *personClient) CreateData(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonStruct)
	err := c.cc.Invoke(ctx, Person_CreateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personClient) GetDataById(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonStruct)
	err := c.cc.Invoke(ctx, Person_GetDataById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personClient) GetAllDataByField(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonStruct)
	err := c.cc.Invoke(ctx, Person_GetAllDataByField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personClient) DeleteData(ctx context.Context, in *JsonStruct, opts ...grpc.CallOption) (*JsonStruct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonStruct)
	err := c.cc.Invoke(ctx, Person_DeleteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServer is the server API for Person service.
// All implementations must embed UnimplementedPersonServer
// for forward compatibility
//
// all request and respnse type 'JsonStruct' to use.
type PersonServer interface {
	CreateData(context.Context, *JsonStruct) (*JsonStruct, error)
	GetDataById(context.Context, *JsonStruct) (*JsonStruct, error)
	GetAllDataByField(context.Context, *JsonStruct) (*JsonStruct, error)
	DeleteData(context.Context, *JsonStruct) (*JsonStruct, error)
	mustEmbedUnimplementedPersonServer()
}

// UnimplementedPersonServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServer struct {
}

func (UnimplementedPersonServer) CreateData(context.Context, *JsonStruct) (*JsonStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateData not implemented")
}
func (UnimplementedPersonServer) GetDataById(context.Context, *JsonStruct) (*JsonStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataById not implemented")
}
func (UnimplementedPersonServer) GetAllDataByField(context.Context, *JsonStruct) (*JsonStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDataByField not implemented")
}
func (UnimplementedPersonServer) DeleteData(context.Context, *JsonStruct) (*JsonStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedPersonServer) mustEmbedUnimplementedPersonServer() {}

// UnsafePersonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServer will
// result in compilation errors.
type UnsafePersonServer interface {
	mustEmbedUnimplementedPersonServer()
}

func RegisterPersonServer(s grpc.ServiceRegistrar, srv PersonServer) {
	s.RegisterService(&Person_ServiceDesc, srv)
}

func _Person_CreateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).CreateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_CreateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).CreateData(ctx, req.(*JsonStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Person_GetDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).GetDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_GetDataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).GetDataById(ctx, req.(*JsonStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Person_GetAllDataByField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).GetAllDataByField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_GetAllDataByField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).GetAllDataByField(ctx, req.(*JsonStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Person_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).DeleteData(ctx, req.(*JsonStruct))
	}
	return interceptor(ctx, in, info, handler)
}

// Person_ServiceDesc is the grpc.ServiceDesc for Person service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Person_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Person",
	HandlerType: (*PersonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateData",
			Handler:    _Person_CreateData_Handler,
		},
		{
			MethodName: "GetDataById",
			Handler:    _Person_GetDataById_Handler,
		},
		{
			MethodName: "GetAllDataByField",
			Handler:    _Person_GetAllDataByField_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _Person_DeleteData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofile/person.proto",
}
